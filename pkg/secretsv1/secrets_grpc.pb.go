// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: secrets.proto

package secretsv1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretsV1_List_FullMethodName   = "/secretsv1.SecretsV1/List"
	SecretsV1_Get_FullMethodName    = "/secretsv1.SecretsV1/Get"
	SecretsV1_Create_FullMethodName = "/secretsv1.SecretsV1/Create"
	SecretsV1_Update_FullMethodName = "/secretsv1.SecretsV1/Update"
	SecretsV1_Delete_FullMethodName = "/secretsv1.SecretsV1/Delete"
)

// SecretsV1Client is the client API for SecretsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsV1Client interface {
	List(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	Get(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	Create(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	Update(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error)
	Delete(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type secretsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSecretsV1Client(cc grpc.ClientConnInterface) SecretsV1Client {
	return &secretsV1Client{cc}
}

func (c *secretsV1Client) List(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, SecretsV1_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsV1Client) Get(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretsV1_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsV1Client) Create(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, SecretsV1_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsV1Client) Update(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecretResponse)
	err := c.cc.Invoke(ctx, SecretsV1_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsV1Client) Delete(ctx context.Context, in *SecretRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, SecretsV1_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsV1Server is the server API for SecretsV1 service.
// All implementations must embed UnimplementedSecretsV1Server
// for forward compatibility.
type SecretsV1Server interface {
	List(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	Get(context.Context, *SecretRequest) (*GetSecretResponse, error)
	Create(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	Update(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error)
	Delete(context.Context, *SecretRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSecretsV1Server()
}

// UnimplementedSecretsV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretsV1Server struct{}

func (UnimplementedSecretsV1Server) List(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretsV1Server) Get(context.Context, *SecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretsV1Server) Create(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretsV1Server) Update(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSecretsV1Server) Delete(context.Context, *SecretRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSecretsV1Server) mustEmbedUnimplementedSecretsV1Server() {}
func (UnimplementedSecretsV1Server) testEmbeddedByValue()                   {}

// UnsafeSecretsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsV1Server will
// result in compilation errors.
type UnsafeSecretsV1Server interface {
	mustEmbedUnimplementedSecretsV1Server()
}

func RegisterSecretsV1Server(s grpc.ServiceRegistrar, srv SecretsV1Server) {
	// If the following call pancis, it indicates UnimplementedSecretsV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretsV1_ServiceDesc, srv)
}

func _SecretsV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsV1_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsV1Server).List(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsV1_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsV1Server).Get(ctx, req.(*SecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsV1_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsV1Server).Create(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsV1_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsV1Server).Update(ctx, req.(*UpdateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsV1Server).Delete(ctx, req.(*SecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsV1_ServiceDesc is the grpc.ServiceDesc for SecretsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secretsv1.SecretsV1",
	HandlerType: (*SecretsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SecretsV1_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SecretsV1_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SecretsV1_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SecretsV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SecretsV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secrets.proto",
}
